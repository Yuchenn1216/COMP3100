import java.io.*;
import java.net.*;

public class DSclient {
    public static void main(String[] args) {

        try {
            // create a socket
            Socket s = new Socket("localhost", 50000);
            // Initialise input and output streams associated with the socket
            DataOutputStream out = new DataOutputStream(s.getOutputStream());
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));

            // connect ds-server
            // Send HELO
            out.write(("HELO\n").getBytes());
            out.flush();
            System.out.println("sent HELO");
            String str = (String) in.readLine();
            System.out.println("RCVD: " + str);

            // Send AUTH username
            String username = System.getProperty("user.name");
            out.write(("AUTH " + username + "\n").getBytes());
            out.flush();
            System.out.println("sent AUTH");
            str = (String) in.readLine();
            System.out.println("RCVD: " + str);

            Boolean flag = true;
            // While the last message from ds-server is not NONE do
            while (true) {
                out.write(("REDY\n").getBytes());
                out.flush();
                System.out.println("sent REDY");
                str = in.readLine();
                System.out.println("RCVD: " + str); // one of the following type: JOBN,JCPL orNone

                if (str.equals("NONE"))
                    break;

                // store the type of job and its id
                String[] jobInfo = str.split(" ");
                String jobType = jobInfo[0];
                String jobID = jobInfo[2];

                if (jobType.equals("JCPL"))
                    continue;

                if (flag) {
                    // Get the available servers
                    out.write(("GETS All\n").getBytes());
                    out.flush();
                    str = (String) in.readLine(); // DATA X Y

                    out.write(("OK\n").getBytes());
                    out.flush();
                    String[] serverInfoList = str.split(" ");
                    int nRecs = Integer.parseInt(serverInfoList[1]); // get the number of servers

                    // Find the best server based on the custom scheduling algorithm
                    String bestServerID = findBestServer(jobInfo, in, nRecs);
                    if (bestServerID == null) {
                        System.out.println("No server available");
                        break;
                    }

                    // Schedule the job to the best server
                    String schdMsg = "SCHD " + jobID + " " + bestServerID + "\n";
                    out.write(schdMsg.getBytes());
                    out.flush();
                }
                flag = false;
            }

            out.write(("QUIT\n").getBytes());
            out.flush();
            // System.out.println("sent QUIT");
            str = in.readLine();
            // System.out.println("RCVD: " + str);
            in.close();
            out.close();
            s.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private static String findBestServer(String[] jobInfo, BufferedReader in, int nRecs) throws IOException {
        String jobCore = jobInfo[4];
        String jobRam = jobInfo[5];
        String jobDisk = jobInfo[6];

        String bestServerID = null;
        double minTurnaroundTime = Double.MAX_VALUE;

        for (int i = 0; i < nRecs; i++) {
            String str = (String) in.readLine();
            System.out.println("RCVD: " + str);

            String[] serverInfo = str.split(" ");
            String serverType = serverInfo[0];
            String serverID = serverInfo[1];
            String serverState = serverInfo[2];
            int serverCore = Integer.parseInt(serverInfo[4]);
            int serverRam = Integer.parseInt(serverInfo[5]);
            int serverDisk = Integer.parseInt(serverInfo[6]);

            // Calculate the estimated turnaround time for the job on the current server
            double estimatedTurnaroundTime = calculateTurnaroundTime(jobCore, jobRam, jobDisk, serverCore, serverRam, serverDisk);

            // Check if the estimated turnaround time is lower than the current minimum
            if (estimatedTurnaroundTime < minTurnaroundTime) {
                // Check if the server is available and has enough resources to handle the job
                if (serverState.equals("active") && serverCore >= Integer.parseInt(jobCore)
                        && serverRam >= Integer.parseInt(jobRam) && serverDisk >= Integer.parseInt(jobDisk)) {
                    bestServerID = serverID;
                    minTurnaroundTime = estimatedTurnaroundTime;
                }
            }
        }

        return bestServerID;
    }

    private static double calculateTurnaroundTime(String jobCore, String jobRam, String jobDisk, int serverCore,
            int serverRam, int serverDisk) {
        // Calculate the estimated turnaround time based on the provided metrics
        double turnaroundTime = 0.0;

        // You can define your custom formula here to calculate the turnaround time
        // based on the given job and server resource metrics

        return turnaroundTime;
    }
}
